version: 2.1
orbs:
  docker: circleci/docker@1.5.0
jobs:
  checkout_code:
    docker:
      - image: circleci/ruby:2.5
    working_directory: ~/app
    steps:
      - restore_cache:
          name: Restore code from cache
          keys:
            - v1-source-{{ .Branch }}-{{ .Revision }}
      - checkout
      - save_cache:
          name: Save code cache
          key: v1-source-{{ .Branch }}-{{ .Revision }}
          paths:
            - '.git'
      - persist_to_workspace:
          root: ~/
          paths:
            - app/*
            - app/**/*
  bundle:
    docker:
      - image: circleci/ruby:2.5-stretch
    environment:
      BUNDLE_PATH: vendor/bundle
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update Debian Packages
          command: |
            echo "deb http://http.debian.net/debian stretch main" | sudo tee -a /etc/apt/sources.list
            sudo apt-get update -qq
            sudo apt-get upgrade -qq
            sudo apt-get install -y software-properties-common build-essential make apt-utils default-libmysqlclient-dev mariadb-client nodejs
      - restore_cache:
          name: Restore bundle from cache
          keys:
            - v2-bundle-{{ checksum "Gemfile.lock" }}
      - run:
          name: Update bundler
          command: gem install bundler -v 2.1.4
      - run:
          name: Install dependencies
          command: bundle install --path=vendor/bundle --jobs=4 --retry=3
      # Disable rubocop, it wasn't setup to run in the old workflow
      #- run:
      #    name: Run Rubocop
      #    command: bundle exec rubocop
      - save_cache:
          name: Save bundle cache
          key: v2-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
            - tmp/zips
      - persist_to_workspace:
          root: ~/
          paths:
            - app/*
            - app/**/*
  test:
    docker:
      - image: circleci/ruby:2.5-stretch-node-browsers
        environment:
          BUNDLE_PATH: vendor/bundle
          USE_CCI: true
          RAILS_ENV: test
          ED2_DB_PASSWORD: '12341234'
          ED2_DB_PORT: '3306'
          ED2_DB_USERNAME: root
          ED2_DB_HOST: 127.0.0.1
      - image: circleci/mysql:5.7.22
        environment:
          MYSQL_ROOT_PASSWORD: '12341234'
          MYSQL_DATABASE: ed2_test
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Update Debian Packages
          command: |
            sudo apt-get update -qq
            sudo apt-get upgrade -qq
            sudo apt-get install -y -f software-properties-common build-essential default-libmysqlclient-dev mariadb-client nodejs make apt-utils

      - restore_cache:
          key: gemfile-{{ checksum "Gemfile.lock" }}

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Force install bundler
          command: gem install --force bundler
      - run:
          name: Force bundle update (srsly again)
          command: bundle install --path=vendor/bundle --jobs=4 --retry=3

      - run:
          name: Copy local_env.yml
          command: cp config/local_env.example.yml config/local_env.yml
      - run:
          name: Copy settings.yml
          command: cp config/settings.example.yml config/settings.yml
      - run:
          name: Create DB
          command: bundle exec rake db:create db:schema:load --trace


      - run:
          name: Run Tests
          command: |
            bundle exec rspec --profile 10 \
                              --format RspecJunitFormatter \
                              --out /tmp/test-results/rspec.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
      - store_artifacts:
          path: coverage
          destination: coverage
  build_and_push_beavernetes:
    parameters:
      repo:
        type: string
        default: ''
      environment:
        type: string
        default: 'production'
    executor:
      name: 'docker/docker'
    environment:
      DOCKER_LOGIN: admin
      DOCKER_PASSWORD: admin
    working_directory: ~/app
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Generate deployed version
          command: |
            export GIT_SHORT_HASH=$(git rev-parse --short HEAD)
            export DATETIME=$(date "+%Y%m%d%H%M%S")
            echo export TAG="$DATETIME-$GIT_SHORT_HASH" >> $BASH_ENV
            echo export DEPLOYED_VERSION="$DATETIME-$GIT_SHORT_HASH" >> $BASH_ENV
      - setup_remote_docker:
          version: 20.10.2
      - docker/check:
          registry: registry.library.oregonstate.edu
      - docker/build:
          registry: registry.library.oregonstate.edu
          image: ed2-rails-c7
          tag: $TAG
          extra_build_args: --build-arg RAILS_ENV=<< parameters.environment >> --build-arg DEPLOYED_VERSION=$DEPLOYED_VERSION
      - docker/push:
          registry: registry.library.oregonstate.edu
          image: ed2-rails-c7
          tag: $TAG
workflows:
  ci:
    jobs:
      - checkout_code
      - bundle:
          requires:
            - checkout_code
      - test:
          requires:
            - bundle
      - build_and_push_beavernetes:
          name: build_and_push_beavernetes
          requires:
            - test
          repo: ed2-rails-c7
          environment: production
