version: '3'

volumes:
  app:
  db:
  redis:

services:
  # Run an instance of MySQL with a database named 'development' for running specs. See config/database.yml
  db:
    image: mysql:5.7
    restart: always
    container_name: db
    environment:
      - MYSQL_ROOT_PASSWORD=12341234
      - MYSQL_PASSWORD=12341234
      - MYSQL_DATABASE=development
    volumes:
      - db:/var/lib/mysql
      - ./config/mysql/mysqld.cnf:/etc/mysql/conf.d/custom.cnf
    expose:
      - 3306

  ##
  # Run an instance of MySQL with a database named 'test' for running specs. See config/database.yml. Has no volume
  # and doesn't intend on persisting data across sessions.
  db_test:
    image: mysql:5.7
    restart: always
    container_name: db_test
    environment:
      - MYSQL_ROOT_PASSWORD=12341234
      - MYSQL_PASSWORD=12341234
      - MYSQL_DATABASE=test
    volumes:
      - ./config/mysql/mysqld.cnf:/etc/mysql/conf.d/custom.cnf

  web:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RAILS_ENV=${RAILS_ENV}
    container_name: web
    command: >
      bash -c "rm -f tmp/pids/server.pid && bundle exec rails server -p 3000 -b '0.0.0.0' -e ${RAILS_ENV}"
    depends_on:
      caddy:
        condition: service_started
      db:
        condition: service_started
      db_test:
        condition: service_started
      db_migrate:
        condition: service_started
      redis:
        condition: service_started
    volumes:
      - .:/data
      - app:/data/tmp/uploads
    expose:
      - 3000
    stdin_open: true
    tty: true

  ##
  # Ensure that the database migrations are run on the appropriate database related to the RAILS_ENV running
  db_migrate:
      extends: app
      container_name: db_migrate
      restart: on-failure
      command: bundle exec rails db:migrate RAILS_ENV=${RAILS_ENV}
      depends_on:
        - db

  ##
  # Runs sidekiq to process background jobs
  workers:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RAILS_ENV=${RAILS_ENV}
    volumes:
      - .:/data
      - app:/data/tmp/uploads
    container_name: workers
    command: bundle exec sidekiq -L /dev/stdout
    depends_on:
      caddy:
        condition: service_started
      db:
        condition: service_started
      db_test:
        condition: service_started
      db_migrate:
        condition: service_started
      redis:
        condition: service_started

  ##
  # Redis for the background job queues
  redis:
    image: redis:alpine
    container_name: redis
    volumes:
      - redis:/data

  caddy:
    image: caddy:2.3.0
    container_name: caddy
    ports:
      - "3000:3000"
    volumes:
      - ./caddy:/etc/caddy
    environment:
      - ADMIN_USER=${ADMIN_USER:-admin}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
      - ADMIN_PASSWORD_HASH=${ADMIN_PASSWORD_HASH:-JDJhJDE0JE91S1FrN0Z0VEsyWmhrQVpON1VzdHVLSDkyWHdsN0xNbEZYdnNIZm1pb2d1blg4Y09mL0ZP}
    restart: unless-stopped
